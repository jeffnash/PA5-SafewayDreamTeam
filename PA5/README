README file for Programming Assignment 5  (Java edition)
=======================================================

Your directory should now contain the following files:

 ASTConstants.java    [DO NOT MODIFY]
 ASTLexer.java        [DO NOT MODIFY]
 ASTParser.java       [DO NOT MODIFY]
 AbstractSymbol.java  [DO NOT MODIFY]
 AbstractTable.java   [DO NOT MODIFY]
 BoolConst.java
 Cgen.java            [DO NOT MODIFY]
 CgenClassTable.java
 CgenNode.java
 CgenSupport.java
 ClassTable.java      [DO NOT MODIFY]
 Flags.java           [DO NOT MODIFY]
 IdSymbol.java        [DO NOT MODIFY]
 IdTable.java         [DO NOT MODIFY]
 IntSymbol.java
 IntTable.java        [DO NOT MODIFY]
 ListNode.java        [DO NOT MODIFY]
 build.xml            [DO NOT MODIFY]
 README
 StringSymbol.java
 StringTable.java     [DO NOT MODIFY]
 SymbolTable.java     [DO NOT MODIFY]
 SymtabExample.java   [DO NOT MODIFY]
 TokenConstants.java  [DO NOT MODIFY]
 TreeConstants.java
 TreeNode.java        [DO NOT MODIFY]
 Utilities.java       [DO NOT MODIFY]
 cool-tree.java
 example.cl
 tests
         1.cl
         2.cl
         3.cl
         4.cl
         5.cl
         6.cl
         checkpoint.cl
 mycoolc              [DO NOT MODIFY]
 reference-coolc      [DO NOT MODIFY]
 reference-cgen       [DO NOT MODIFY]
 runmips              [DO NOT MODIFY]
 trap_handler.mars    [DO NOT MODIFY]
 coolc.jar            [DO NOT MODIFY]


        The build.xml contains targets for compiling and running your
        program, as well as handing it in. DO NOT MODIFY.

        The README contains this info. Part of the assignment is to
        fill the README with the write-up for your project. You should
        explain design decisions, explain why your code is correct,
        and why your test cases are adequate. It is part of the
        assignment to clearly and concisely explain things in text as
        well as to comment your code.

        In example.cl, you should write a correct Cool program which
        tests as many aspects of the code generator as possible. It
        should pass your code generator, and running MARS on the
        generated output should run the program correctly.

        CgenClassTable.java and CgenNode.java are the skeleton files for
        the code generator. These skeletons are much larger than the
        ones for previous assignments.  The skeletons provides three
        components of the code generator:

                - functions to build the inheritance graph; (we supply
                  this in case you didn't get this working for PA4)

                - functions to emit global data and constants;

        You should work to understand this code, and it will help you
        write the rest of the code generator.

        tests is a directory containing seven test cases.

        TreeNode.java and ListNode.java contain definitions used by
        the tree package. DO NOT MODIFY.

        cool-tree.java specifies and give an implementation of Cool
        ASTs (see the README for PA3 and the "Cool Tour").  In this
        assignment, you will need to complete the code generating
        methods for all Cool expression nodes.

        BoolConst.java, IntSymbol.java, and StringSymbol.java are used
        to manage constants in Cool programs.  You will need to
        complete the method for generating constant definitions in
        each of these classes.

        CgenSupport.java is general support code for the code
        generator.  You can add functions and constants as you see
        fit, but do not modify anything that's already there.  This
        class also serves as a placeholder for a bunch of constants as
        well as functions to emit MARS instructions (we supply these
        to save you some tedious coding).

        TreeConstants.java defined some useful symbol constants.  You
        may add some of your own, if you wish.

        ASTLexer.java, ASTParser.java, and ASTConstants.java implement
        a lexer and a parser for reading text representation of ASTs
        from console in the format produced by the parser phase. DO
        NOT MODIFY.

        Cgen.java supplies the driver for the compiler. You should not
        modify this code.  The script mycoolc can pass any of the
        standard flags to the code generator; for this assignment, -c
        (code generator debug) may be useful as it sets a global
        variable cgen_debug to true (1).  If you want your code
        generator to print debug information when the option is set,
        write your debug code in the following format:

              if (cgen_debug)
              {
                ...
              }

        SymbolTable.java contains a symbol table implementation. Read
        the comments in the file and look at the example in
        SymtabExample.java.  You are not required to use this code,
        but you may find it useful. DO NOT MODIFY.

Instructions
------------

        To compile your compiler and code generator type:

        % ant cgen

        To test your compiler, type:

        % ./mycoolc [-o output filename] <file1.cl> <file2.cl> ...

        This command parses all the cool files given on the command
        line, passes them through the semantic checker, and then hands
        the program AST to your code generator.

        To run your compiler on the file example.cl, type:

        % ant test

        To run the produced code:

        % runmips file1.s  /* or the output filename you chose */

        To turn in your work at checkpoint, type:

        % ant submit-clean
        % submit PA5-checkpoint

        To turn in your work finally, type:

        % ant submit-clean
        % submit PA5

        Be sure to submit all relevant source files.
        In particular, you probably want to turn in cool-tree.java,
        TreeConstants.java, BoolConst.java, IntSymbol.java, StringSymbol.java,
        CgenNode.java, CgenClassTable.java, CgenSupport.java, example.cl, README.

        You may turn in the assignment as many times as you like.
        However, only the last version will be retained for grading.

        GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA5
----------------
This project was markedly harder than all of the previous programming assignments combined, largely because, as a concept, code generation itself is extremely complicated. It was certainly nice that we got to leverage the reference parser and lexer, which guaranteed the type safety of the code we were to deal with. However, dealing with registers and allocate temporaries when needed, all while keeping track of offsets, presented a new set of challenges that only became apparent as we delved into the recursive nature of expression evaluation.

When coding CgenClassTable.java, it was immensely helpful that all inheritance relationships were stored in each CgenNode, which represented each class. Once we had called installBasicClasses(), we chose to use a recursive function to run a depth-first search on each class's inheritance tree. While the order of class-tags didn't seem important at the start of the project, guaranteeing that the class-tags representing a given class and its children were adjacent to one another helped us in one of the most esoteric, specific, and complicated features of the COOL language: the case statement.

Having to retroactively implement a depth-first search once class-tags were already such a long-forgotten and assumed aspect of our completion of this project was a pain, with off-by-one errors abound. However, being able to guarantee that, given an arbitrary class-tag, one could use the class's integer representation to retrieve two integers from a map (we used a HashMap) that would represent the 'boundary classes' of its inheritance tree was vital in the last mile of our project: getting case to work.

Finally, wrapping our minds around what needed to be done for garbage collection was also somewhat of a challenge, but once we realized our implementation merely had to be compatible with the existing garbage collection system (and recognize the flags in Flags.java), things became a lot easier. Despite many tears and sleepless nights along the way, this project proved to be a fitting end to the class that synced up quite nicely with the material presented in lecture. 5/5 stars.







